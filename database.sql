--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.2.23.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 12/29/2023 2:49:51 PM
-- Server version: 5.5.5-10.4.27-MariaDB
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE assignment;

--
-- Drop procedure `spAddUpdateDepartment`
--
DROP PROCEDURE IF EXISTS spAddUpdateDepartment;

--
-- Drop procedure `spAddUpdateProfile`
--
DROP PROCEDURE IF EXISTS spAddUpdateProfile;

--
-- Drop procedure `spGetDepartmentData`
--
DROP PROCEDURE IF EXISTS spGetDepartmentData;

--
-- Drop procedure `spRemoveDepartmentData`
--
DROP PROCEDURE IF EXISTS spRemoveDepartmentData;

--
-- Drop table `department`
--
DROP TABLE IF EXISTS department;

--
-- Drop procedure `spAssignDepartment`
--
DROP PROCEDURE IF EXISTS spAssignDepartment;

--
-- Drop procedure `spGetEmployeeData`
--
DROP PROCEDURE IF EXISTS spGetEmployeeData;

--
-- Drop procedure `spLogin`
--
DROP PROCEDURE IF EXISTS spLogin;

--
-- Drop procedure `spRemoveEmployeeData`
--
DROP PROCEDURE IF EXISTS spRemoveEmployeeData;

--
-- Drop table `employee`
--
DROP TABLE IF EXISTS employee;

--
-- Set default database
--
USE assignment;

--
-- Create table `employee`
--
CREATE TABLE employee (
  EmployeeId varchar(50) NOT NULL,
  FullName varchar(100) DEFAULT NULL,
  Password varchar(255) DEFAULT NULL,
  Email varchar(50) NOT NULL,
  Phone varchar(55) DEFAULT NULL,
  Address varchar(255) DEFAULT NULL,
  Designation varchar(55) DEFAULT NULL,
  Department varchar(100) DEFAULT NULL,
  CreatedOn datetime DEFAULT NULL,
  CreatedBy varchar(100) DEFAULT NULL,
  Status varchar(100) DEFAULT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 5461,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `Email` on table `employee`
--
ALTER TABLE employee
ADD UNIQUE INDEX Email (Email);

DELIMITER $$

--
-- Create procedure `spRemoveEmployeeData`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE spRemoveEmployeeData (IN pId varchar(50))
BEGIN
  UPDATE employee e
  SET e.Status = 'Inactive'
  WHERE e.EmployeeId = pId;


END
$$

--
-- Create procedure `spLogin`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE spLogin (IN pEmailId varchar(50))
BEGIN
  SELECT
    *
  FROM employee e
  WHERE e.Email = pEmailId
  ORDER BY e.CreatedOn DESC LIMIT 1;

END
$$

--
-- Create procedure `spGetEmployeeData`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE spGetEmployeeData (IN pFilterdata varchar(50), IN pEmployeeid varchar(50))
BEGIN

  IF pEmployeeid = '' THEN

    IF pFilterdata = 'NameAscending' THEN
      SELECT
        *
      FROM employee e
      WHERE e.Status = 'Active'
      ORDER BY e.FullName ASC;

    ELSE
      IF pFilterdata = 'NameDscending' THEN

        SELECT
          *
        FROM employee e
        WHERE e.Status = 'Active'
        ORDER BY e.FullName DESC;

      ELSE
        IF pFilterdata = 'AddressAscending' THEN
          SELECT
            *
          FROM employee e
          WHERE e.Status = 'Active'
          ORDER BY e.Address ASC;

        ELSE
          IF pFilterdata = 'AddressDscending' THEN
            SELECT
              *
            FROM employee e
            WHERE e.Status = 'Active'
            ORDER BY e.Address DESC;

          ELSE

            SELECT
              *
            FROM employee e
            WHERE e.Status = 'Active';
          END IF;
        END IF;
      END IF;
    END IF;

  ELSE

    IF pFilterdata = 'NameAscending' THEN
      SELECT
        *
      FROM employee e
      WHERE e.Status = 'Active'
      AND e.EmployeeId = pEmployeeid
      ORDER BY e.FullName ASC;

    ELSE
      IF pFilterdata = 'NameDscending' THEN

        SELECT
          *
        FROM employee e
        WHERE e.Status = 'Active'
        AND e.EmployeeId = pEmployeeid
        ORDER BY e.FullName DESC;

      ELSE
        IF pFilterdata = 'AddressAscending' THEN
          SELECT
            *
          FROM employee e
          WHERE e.Status = 'Active'
          AND e.EmployeeId = pEmployeeid
          ORDER BY e.Address ASC;

        ELSE
          IF pFilterdata = 'AddressDscending' THEN
            SELECT
              *
            FROM employee e
            WHERE e.Status = 'Active'
            AND e.EmployeeId = pEmployeeid
            ORDER BY e.Address DESC;

          ELSE

            SELECT
              *
            FROM employee e
            WHERE e.Status = 'Active'
            AND e.EmployeeId = pEmployeeid;
          END IF;
        END IF;
      END IF;
    END IF;


  END IF;


END
$$

--
-- Create procedure `spAssignDepartment`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE spAssignDepartment (IN pId varchar(50), IN pDepartment varchar(50))
BEGIN
  UPDATE employee e
  SET e.Department = pDepartment
  WHERE e.EmployeeId = pId;




END
$$

DELIMITER ;

--
-- Create table `department`
--
CREATE TABLE department (
  DepartmentId varchar(255) DEFAULT NULL,
  DepartmentName varchar(255) DEFAULT NULL,
  Status varchar(255) DEFAULT NULL,
  CreatedOn datetime DEFAULT NULL,
  CreatedBy varchar(255) DEFAULT NULL,
  UpdatedOn datetime DEFAULT NULL,
  UpdatedBy varchar(255) DEFAULT NULL
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 4096,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

DELIMITER $$

--
-- Create procedure `spRemoveDepartmentData`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE spRemoveDepartmentData (IN pId varchar(50))
BEGIN
  UPDATE department d
  SET d.Status = 'Inactive'
  WHERE d.DepartmentID = pId;


END
$$

--
-- Create procedure `spGetDepartmentData`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE spGetDepartmentData ()
BEGIN
  SELECT
    *
  FROM department d
  WHERE d.Status = 'Active';


END
$$

--
-- Create procedure `spAddUpdateProfile`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE spAddUpdateProfile (IN pEmployeeId varchar(100), IN pFullName varchar(100), IN pPassword varchar(100), IN pEmail varchar(100), IN pPhone varchar(100), IN pAddress varchar(100), IN pDesignation varchar(100), IN pDepartment varchar(100), IN pStatus varchar(100))
BEGIN
  DECLARE vemployeeId varchar(38);
  SET vemployeeId = UUID();
  IF (pEmployeeId = '') THEN

    INSERT INTO employee (EmployeeId, FullName, Password, Email, Phone, Address, Designation, Department, CreatedOn, CreatedBy, Status)
      VALUES (vemployeeId, pFullName, pPassword, pEmail, pPhone, pAddress, pDesignation, '', NOW(), '', pStatus);


  ELSE
    UPDATE employee e
    SET e.FullName = pFullName,
        e.Password = pPassword,
        e.Email = pEmail,
        e.Phone = pPhone,
        e.Address = pAddress,
        e.Department = pDepartment,
        e.Status = pStatus
    WHERE e.EmployeeId = pEmployeeId
    AND e.Status = 'Active';

  END IF;

  SELECT
    *
  FROM employee e
  WHERE e.EmployeeId = vemployeeId;
END
$$

--
-- Create procedure `spAddUpdateDepartment`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE spAddUpdateDepartment (IN pDepartmentId varchar(100), IN pDepartmentName varchar(100), IN pCurrentUser varchar(100))
BEGIN
  DECLARE vdepartmentId varchar(38);
  SET vdepartmentId = UUID();
  IF (pDepartmentId = '') THEN

    INSERT INTO department (DepartmentID, DepartmentName, Status, CreatedOn, CreatedBy, UpdatedOn, UpdatedBy)
      VALUES (vdepartmentId, pDepartmentName, 'Active', NOW(), pCurrentUser, '', '');

  ELSE

    UPDATE department d
    SET d.DepartmentName = pDepartmentName,
        d.UpdatedOn = NOW(),
        d.UpdatedBy = pCurrentUser
    WHERE d.DepartmentID = pDepartmentId
    AND d.Status = 'Active';

  END IF;

  SELECT
    *
  FROM department d
  WHERE d.DepartmentID = vdepartmentId;


END
$$

DELIMITER ;

-- 
-- Dumping data for table employee
--
INSERT INTO employee VALUES
('xzXXxx21432134', 'xSAaSas', NULL, '', NULL, NULL, NULL, NULL, NULL, NULL, 'Inactive'),
('02ccd315-a196-11ee-921d-00ff58759b81', 'aaa', '$2b$10$Y9qkOKuHTLG2JjvrWwPSvuuHzVsoJKS6.sd9WTBMcnZk6rk2evn7e', 'aaaa', '8989898988', 'aaaa', 'Manager', '', '2023-12-23 18:50:15', '', 'Inactive'),
('dd773b95-a195-11ee-921d-00ff58759b81', 'aabbn', '$2b$10$rTq.adaSmmLSVJfB1dlaQ.PgwZre8nmET/Odc5zQlVSTyiNwnvtU.', 'abc', '999999996', 'sssaa', 'Employee', '', '2023-12-23 18:49:13', '', 'Active'),
('8b3d9fcc-9fb1-11ee-9b6c-040e3ccb3a0c', 'Aman', '$2b$10$3EOxu.Fn6RM1gU98k8mx9uwd3.KhAhPJEYaLDFOeNVUsk8NMjEize', 'Aman1@gmail.com', '989990099', 'Ahmedabad', 'Manager', '', '2023-12-21 09:02:18', 'Admin', 'Inactive'),
('da7ef2c0-9fb0-11ee-9b6c-040e3ccb3a0c', 'Aman', '$2b$10$xtTMcKdPafwhPueKikO0W.0EhauL1BMKXzLlv9otDrvj9Y41Sz43y', 'Aman@gmail.com', '98989800', 'delhi', 'Employee', 'e4a1f971-a5a0-11ee-b15c-00ff58759b81', '2023-12-21 08:57:22', 'Admin', 'Active'),
('049e42c8-a5f4-11ee-8bdb-00ff58759b81', 'Bhanu', '$2b$10$0YJMzPHE/jtPPxsUKQ1OmuvCLfDHV3ZQ7r6/3hHVVwefz.QjeOihq', 'bhanu.singh@gmail.com', '7906436850', 'Gujarat', 'Employee', '', '2023-12-29 08:13:16', '', 'Active'),
('a5fa3912-a191-11ee-921d-00ff58759b81', 'Vicky', '$2b$10$DqREv0jNp3NrE7Ra//WPQ.nlBPqt7vjfIOivjcwwxdcFz9f7efXdO', 'bhanu@123', '8758470056', 'New Delhi', 'Manager', '', '2023-12-23 18:19:02', '', 'Active'),
('2d4a6c50-a5a9-11ee-b15c-00ff58759b81', 'Bhanu Singh', '$2b$10$J.jw8Ulq6mRv.dfkvLHG9OfEcUHiPnebU8HtnChsl9Ki3KV5Vhgfy', 'bhanupratapsingh.developer@gmail.com', '9801096001', 'Delhi', 'Manager', '', '2023-12-28 23:17:32', '', 'Active'),
('6d564f72-a614-11ee-8bdb-00ff58759b81', 'Prachi', '$2b$10$C44g.aZdQRVDqHDFRNq6wON0b5PJ46p4LjbKg316onOC9DXGYh1Ti', 'prachi@gmail.com', '9999999999', 'Punjab', 'Employee', '', '2023-12-29 12:05:15', '', 'Active'),
('520d7698-a09f-11ee-96b6-00ff58759b81', 'Bhanu', '$2b$10$J.jw8Ulq6mRv.dfkvLHG9OfEcUHiPnebU8HtnChsl9Ki3KV5Vhgfy', 'vickyreply2u@gmail.com', '9801096001', 'Ahmedabad', 'Employee', 'e4a1f971-a5a0-11ee-b15c-00ff58759b81', '2023-12-22 13:24:23', '', 'Active');

-- 
-- Dumping data for table department
--
INSERT INTO department VALUES
('e4a1f971-a5a0-11ee-b15c-00ff58759b81', 'Software', 'Active', '2023-12-28 22:18:14', '', '0000-00-00 00:00:00', ''),
('3d796d3c-a5a1-11ee-b15c-00ff58759b81', 'QA', 'Inactive', '2023-12-28 22:20:43', '', '2023-12-28 22:48:47', ''),
('cbaed6a8-a5a5-11ee-b15c-00ff58759b81', 'IIT', 'Active', '2023-12-28 22:53:20', '', '2023-12-29 08:52:50', '2d4a6c50-a5a9-11ee-b15c-00ff58759b81'),
('0394611d-a5a6-11ee-b15c-00ff58759b81', 'Node', 'Active', '2023-12-28 22:54:53', '', '0000-00-00 00:00:00', '');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;